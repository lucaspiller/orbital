// Generated by CoffeeScript 1.6.3
(function() {
  var COLOURS, Engine, GraphicsComponent, OrbitComponent, Orbital, OrbitalSystem, PositionComponent, RenderSystem, TYPES, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  GraphicsComponent = (function() {
    function GraphicsComponent(type, size, colour) {
      this.type = type;
      this.size = size;
      this.colour = colour;
      this.type || (this.type = TYPES.empty);
      this.size || (this.size = 10);
      this.colour || (this.colour = COLOURS.empty);
    }

    return GraphicsComponent;

  })();

  TYPES = {
    empty: 0,
    planet: 1
  };

  COLOURS = {
    empty: 0,
    red: 1,
    greeen: 2,
    blue: 3
  };

  OrbitComponent = (function() {
    function OrbitComponent(parent, distance) {
      this.parent = parent;
      this.distance = distance;
      this.angle = 0;
      true;
    }

    return OrbitComponent;

  })();

  PositionComponent = (function() {
    function PositionComponent(x, y) {
      this.x = x;
      this.y = y;
      this.x || (this.x = 0);
      this.y || (this.y = 0);
    }

    return PositionComponent;

  })();

  Engine = {};

  Engine.Entity = (function() {
    function Entity() {
      this.components = [];
    }

    Entity.prototype.addComponent = function(component) {
      return this.components.push(component);
    };

    Entity.prototype.getComponent = function(componentClass) {
      var component, _i, _len, _ref;
      _ref = this.components;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        component = _ref[_i];
        if (component instanceof componentClass) {
          return component;
        }
      }
      return void 0;
    };

    Entity.prototype.hasComponent = function(componentClass) {
      return this.getComponent(componentClass) !== void 0;
    };

    return Entity;

  })();

  Engine.System = (function() {
    function System() {}

    System.prototype.setWorld = function(world) {
      this.world = world;
      return true;
    };

    System.prototype.update = function() {
      return true;
    };

    return System;

  })();

  Engine.World = (function() {
    function World() {
      this.systems = [];
      this.entities = [];
    }

    World.prototype.addSystem = function(system) {
      this.systems.push(system);
      return system.setWorld(this);
    };

    World.prototype.createEntity = function() {
      var entity;
      entity = new Engine.Entity();
      this.entities.push(entity);
      return entity;
    };

    World.prototype.getEntitiesWithComponent = function(componentClass) {
      return this.entities.filter(function(entity) {
        return entity.hasComponent(componentClass);
      });
    };

    World.prototype.update = function() {
      var system, _i, _len, _ref, _results;
      _ref = this.systems;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        system = _ref[_i];
        _results.push(system.update());
      }
      return _results;
    };

    return World;

  })();

  Orbital = (function() {
    function Orbital(element) {
      this.element = element;
      true;
    }

    Orbital.prototype.start = function() {
      var entity0, entity1, entity2,
        _this = this;
      this.world = new Engine.World();
      this.world.addSystem(new OrbitalSystem());
      this.world.addSystem(new RenderSystem(this.element));
      entity0 = this.world.createEntity();
      entity0.addComponent(new PositionComponent(400, 300));
      entity0.addComponent(new GraphicsComponent(TYPES.planet, 50, COLOURS.blue));
      entity1 = this.world.createEntity();
      entity1.addComponent(new PositionComponent());
      entity1.addComponent(new GraphicsComponent(TYPES.planet, 10, COLOURS.blue));
      entity1.addComponent(new OrbitComponent(entity0, 300));
      entity2 = this.world.createEntity();
      entity2.addComponent(new PositionComponent());
      entity2.addComponent(new GraphicsComponent(TYPES.planet, 3, COLOURS.red));
      entity2.addComponent(new OrbitComponent(entity1, 15));
      entity2 = this.world.createEntity();
      entity2.addComponent(new PositionComponent());
      entity2.addComponent(new GraphicsComponent(TYPES.planet, 2, COLOURS.green));
      entity2.addComponent(new OrbitComponent(entity1, 25));
      return setInterval(function() {
        return _this.world.update();
      }, 1000 / 30);
    };

    return Orbital;

  })();

  window.Orbital = Orbital;

  OrbitalSystem = (function(_super) {
    __extends(OrbitalSystem, _super);

    function OrbitalSystem() {
      this.update = __bind(this.update, this);
      _ref = OrbitalSystem.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    OrbitalSystem.prototype.update = function() {
      var entity, _i, _len, _ref1, _results;
      _ref1 = this.world.getEntitiesWithComponent(OrbitComponent);
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        entity = _ref1[_i];
        _results.push(this.updateEntityOrbit(entity));
      }
      return _results;
    };

    OrbitalSystem.prototype.updateEntityOrbit = function(entity) {
      var orbit, parentPosition, position;
      position = entity.getComponent(PositionComponent);
      orbit = entity.getComponent(OrbitComponent);
      orbit.angle += (Math.PI / 2) * (1 / orbit.distance);
      parentPosition = orbit.parent.getComponent(PositionComponent);
      position.x = parentPosition.x + orbit.distance * Math.cos(orbit.angle);
      return position.y = parentPosition.y + orbit.distance * Math.sin(orbit.angle);
    };

    return OrbitalSystem;

  })(Engine.System);

  RenderSystem = (function(_super) {
    __extends(RenderSystem, _super);

    function RenderSystem(container) {
      this.container = container;
      this.update = __bind(this.update, this);
      this.canvas = document.createElement('canvas');
      this.canvas.width = window.innerWidth - 20;
      this.canvas.height = window.innerHeight - 20;
      this.container.appendChild(this.canvas);
      this.ctx = this.canvas.getContext('2d');
    }

    RenderSystem.prototype.update = function() {
      var entity, _i, _len, _ref1, _results;
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      _ref1 = this.world.getEntitiesWithComponent(GraphicsComponent);
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        entity = _ref1[_i];
        _results.push(this.renderEntity(entity));
      }
      return _results;
    };

    RenderSystem.prototype.renderEntity = function(entity) {
      var graphics, position;
      position = entity.getComponent(PositionComponent);
      graphics = entity.getComponent(GraphicsComponent);
      this.ctx.save();
      switch (graphics.colour) {
        case COLOURS.red:
          this.ctx.fillStyle = '#f00';
          break;
        case COLOURS.green:
          this.ctx.fillStyle = '#0f0';
          break;
        case COLOURS.blue:
          this.ctx.fillStyle = '#00f';
          break;
        default:
          this.ctx.fillStyle = '#000';
      }
      switch (graphics.type) {
        case TYPES.planet:
          this.ctx.beginPath();
          this.ctx.arc(position.x, position.y, graphics.size, 0, Math.PI * 2, true);
          this.ctx.closePath();
          this.ctx.fill();
          break;
        default:
          this.ctx.fillRect(position.x, position.y, graphics.size, graphics.size);
      }
      return this.ctx.restore();
    };

    return RenderSystem;

  })(Engine.System);

}).call(this);
